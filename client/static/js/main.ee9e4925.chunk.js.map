{"version":3,"sources":["components/Astrometrics.js","components/About.js","components/Signin.js","components/Signup.js","components/Main.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Astrometrics","react_default","a","createElement","Component","About","Signin","Signup","Main","Switch","Route","exact","path","component","Navbar","className","href","Link","to","App","components_Navbar","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PAWeA,mLAPX,OACAC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kCAJqBC,aCKZC,EALD,kBACZJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BCGWG,EALA,kBACbL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBCGWI,EALA,kBACbN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBCaWK,EAVF,kBACXP,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWR,IACjCJ,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,gBAAgBC,UAAWb,IAC7CC,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,UAAWP,IACxCL,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,UAAWN,eCO/BO,mLAfX,OACAb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKY,UAAU,6BACbd,EAAAC,EAAAC,cAAA,KAAGa,KAAK,IAAID,UAAU,cAAtB,uBACAd,EAAAC,EAAAC,cAAA,MAAIY,UAAU,8BACZd,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMC,GAAG,YAAWjB,EAAAC,EAAAC,cAAA,KAAGY,UAAU,uBAAjC,YACJd,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMC,GAAG,YAAWjB,EAAAC,EAAAC,cAAA,KAAGY,UAAU,qBAAjC,uBATKX,aCWNe,EAVH,kBACVlB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACiB,EAAD,MACEnB,EAAAC,EAAAC,cAAA,OAAKY,UAAU,aACbd,EAAAC,EAAAC,cAACkB,EAAD,SCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECZNC,IAASC,OACT3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,KACA5B,EAAAC,EAAAC,cAAC2B,EAAD,OAEEC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ee9e4925.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Astrometrics extends Component {\n  render(){\n    return (\n    <div>\n      <h1>Astrometrics</h1>\n      </div>\n  )\n    }\n}\nexport default Astrometrics","import React from 'react';\n\nconst About = ()=> (\n  <div>\n    <h1>About Gaia</h1>\n  </div>\n)\nexport default About;\n","import React from 'react';\n\nconst Signin = ()=> (\n  <div>\n    <h2>Sign In</h2>\n  </div>\n)\nexport default Signin;","import React from 'react';\n\nconst Signup = ()=> (\n  <div>\n    <h2>Sign Up</h2>\n  </div>\n)\nexport default Signup;","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Astrometrics from './Astrometrics';\nimport About from './About';\nimport Signin from './Signin';\nimport Signup from './Signup';\n\nconst Main = () => (\n  <main>\n    <Switch>\n      <Route exact path='/' component={About} />\n      <Route exact path='/astrometrics' component={Astrometrics} />\n      <Route exact path='/sign-in' component={Signin} />\n      <Route exact path='/sign-up' component={Signup} />\n    </Switch>\n  </main>\n)\nexport default Main","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Navbar extends Component {\n  render(){\n    return (\n    <div>\n      <nav>\n        <div className=\"nav-wrapper blue darken-4\">\n          <a href=\"/\" className=\"brand-logo\">Gaia Telescope Data</a>\n          <ul className=\"right hide-on-med-and-down\">\n            <li><Link to=\"/sign-in\"><i className=\"fas fa-sign-in-alt\"></i>Sign In</Link></li>\n            <li><Link to=\"/sign-up\"><i className=\"fas fa-user-plus\"></i>Sign Up</Link></li>\n          </ul>\n        </div>\n      </nav>\n    </div>\n  )\n    }\n}\nexport default Navbar","import React, { Component } from 'react';\nimport Main from './components/Main';\nimport Navbar from './components/Navbar';\n\nconst App = () => (\n  <div>\n  <Navbar/>\n    <div className=\"container\">\n      <Main/>\n    </div>\n  </div>\n)\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nReactDOM.render(\n<BrowserRouter>\n<App />\n</BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}